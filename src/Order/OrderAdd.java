/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Order;

import SQLjava.*;
import Order.*;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author LH
 */
public class OrderAdd extends javax.swing.JPanel {

    /**
     * Creates new form OrderAdd
     */
    public OrderAdd() {
        initComponents();
        if (isStore) {
            starter(selectedId, selectedName);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PaneHeader = new javax.swing.JPanel();
        labTitle = new javax.swing.JLabel();
        labVoucherdate = new javax.swing.JLabel();
        labVoucherNo = new javax.swing.JLabel();
        labCustomer = new javax.swing.JLabel();
        labCourse = new javax.swing.JLabel();
        txtVoucherDate = new com.toedter.calendar.JDateChooser();
        txtVoucherID = new javax.swing.JTextField();
        jComboCustomer = new javax.swing.JComboBox<>();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        PaneFooter = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtConfig = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        jComboEmployee = new javax.swing.JComboBox<>();
        jComboBoxPayment = new javax.swing.JComboBox<>();
        PaneBody = new javax.swing.JScrollPane();
        tabOrderDetail = new javax.swing.JTable();

        labTitle.setText("ORDER TRANSACTIONS");

        labVoucherdate.setText("VouhcerDate");

        labVoucherNo.setText("VoucherNo");

        labCustomer.setText("Customer");

        labCourse.setText("Courses");

        txtVoucherID.setEditable(false);
        txtVoucherID.setBackground(new java.awt.Color(204, 204, 204));
        txtVoucherID.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtVoucherID.setForeground(new java.awt.Color(255, 255, 255));

        jComboCustomer.setEditable(true);
        jComboCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {" - Select an Option - "}));
        jComboCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboCustomerActionPerformed(evt);
            }
        });
        DAO conn = new DAO();
        ArrayList<ArrayList<Object>> result = new ArrayList<>();
        ArrayList<String> field = new ArrayList<String>();
        field.add("name");

        try {
            //  Block of code to try
            result = conn.select(field, "customer");
        }
        catch(Exception e) {
            //  Block of code to handle errors
        }
        for (ArrayList<Object> j : result) {
            for (Object i : j) {
                jComboCustomer.addItem((String)i);
            }
        }

        jComboBoxCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " - Select an Option - " }));
        jComboBoxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PaneHeaderLayout = new javax.swing.GroupLayout(PaneHeader);
        PaneHeader.setLayout(PaneHeaderLayout);
        PaneHeaderLayout.setHorizontalGroup(
            PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labVoucherdate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtVoucherDate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labVoucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PaneHeaderLayout.createSequentialGroup()
                        .addComponent(labTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PaneHeaderLayout.createSequentialGroup()
                        .addComponent(txtVoucherID)
                        .addGap(18, 18, 18)
                        .addComponent(labCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        PaneHeaderLayout.setVerticalGroup(
            PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneHeaderLayout.createSequentialGroup()
                .addComponent(labTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labVoucherdate)
                            .addComponent(labVoucherNo)
                            .addComponent(labCustomer)
                            .addComponent(txtVoucherID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PaneHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labCourse)))
                    .addGroup(PaneHeaderLayout.createSequentialGroup()
                        .addComponent(txtVoucherDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );

        try {
            //  Block of code to try
            result = conn.select(field, "course");
        }
        catch(Exception e) {
            //  Block of code to handle errors
        }
        for (ArrayList<Object> j : result) {
            for (Object i : j) {
                jComboBoxCourse.addItem((String)i);
            }
        }

        jLabel18.setText("Payment");

        jLabel19.setText("Creater");

        jLabel20.setText("Config");

        jLabel21.setText("Total");

        txtAmount.setEditable(false);

        jButton14.setText("Clear");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        jComboEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {" - Select an Option - "}));
        jComboEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboEmployeeActionPerformed(evt);
            }
        });
        try {
            //  Block of code to try
            result = conn.select(field, "employee");
        }
        catch(Exception e) {
            //  Block of code to handle errors
        }
        for (ArrayList<Object> j : result) {
            for (Object i : j) {
                jComboEmployee.addItem((String)i);
            }
        }

        jComboBoxPayment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Postpaid", "Credit Card", "Master Card", "Bank ATM" }));

        javax.swing.GroupLayout PaneFooterLayout = new javax.swing.GroupLayout(PaneFooter);
        PaneFooter.setLayout(PaneFooterLayout);
        PaneFooterLayout.setHorizontalGroup(
            PaneFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaneFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(PaneFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaneFooterLayout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PaneFooterLayout.createSequentialGroup()
                        .addComponent(jComboEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        PaneFooterLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreate, jButton14});

        PaneFooterLayout.setVerticalGroup(
            PaneFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneFooterLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(PaneFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(txtConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(PaneFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(btnCreate))
                .addContainerGap())
        );

        PaneFooterLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel18, jLabel19, jLabel20, jLabel21, txtAmount, txtConfig});

        tabOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Course", "Service Name", "Description", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabOrderDetail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabOrderDetailFocusGained(evt);
            }
        });
        PaneBody.setViewportView(tabOrderDetail);
        if (tabOrderDetail.getColumnModel().getColumnCount() > 0) {
            tabOrderDetail.getColumnModel().getColumn(0).setPreferredWidth(10);
            tabOrderDetail.getColumnModel().getColumn(2).setPreferredWidth(150);
            tabOrderDetail.getColumnModel().getColumn(3).setPreferredWidth(150);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PaneHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PaneBody, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PaneFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PaneHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PaneBody, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(PaneFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public boolean validInput(HashMap<String, Object> input) {
        boolean check = false;
        for (Map.Entry<String, Object> entry : input.entrySet()) {
            String k = entry.getKey();
            String v = (String) entry.getValue();
            if (v == "" || v == null || v.isEmpty()) {
                check = false;
                System.out.println(k + " = " + v);
                break;
            } else {
                check = true;
            }
        }
        return check;

    }
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:

        //valid input
        HashMap<String, Object> data = new HashMap<String, Object>();
        String customer = jComboCustomer.getSelectedItem().toString();
        data.put("VoucherNo", txtVoucherID.getText());
        data.put("CustomerID", customer);
        data.put("Payment", jComboBoxPayment.getSelectedItem());
        data.put("Creater", jComboEmployee.getSelectedItem());
        data.put("Config", txtConfig.getText());
        data.put("Amount", txtAmount.getText());

        boolean check = validInput(data);

        //check = true;// for test
        if (check) {
            try {
                DAO conn = new DAO();
                // insert transaction
                String table = "transaction";
                int CustomerID = conn.selectGetID("customer", " name='" + customer + "'");
                customer = Integer.toString(CustomerID);
                data.put("CustomerID", customer);
                int transactionID = conn.Insert(table, data, "getID");

                //insert order detail   
                data = new HashMap<String, Object>();
                table = "orderdetail";

                int row = tabOrderDetail.getRowCount();
                System.out.println(" row =" + row);

                for (int i = 0; i < row; i++) {
                    Object temp = tabOrderDetail.getValueAt(i, 1);
                    // check value null in JTable model
                    if (temp == null || temp == "") {
                        break;
                    } else {
                        //data.put("ID", tabOrderDetail.getValueAt(i,0) );
                        data.put("Course", tabOrderDetail.getValueAt(i, 1));
                        data.put("BatchID", transactionID);

                        data.put("ProductName", tabOrderDetail.getValueAt(i, 2));
                        if (tabOrderDetail.getValueAt(i, 3) == null) {
                            tabOrderDetail.setValueAt("", i, 3);
                        }
                        data.put("Description", tabOrderDetail.getValueAt(i, 3));
                        data.put("Price", tabOrderDetail.getValueAt(i, 4));
                        conn.Insert(table, data);
                    }

                }

                JOptionPane.showMessageDialog(center, " Create success !");
//            // change view 

                OrderView ov = new OrderView();
                System.out.println("befor add");
                System.out.println((String) txtVoucherID.getText());

                center.removeAll();
                center.add(ov);
                ov.addVoucherCreated((String) txtVoucherID.getText());
                Orders.btnDel.setEnabled(true);
                center.repaint();
                center.revalidate();
            } catch (Exception ex) {
                System.out.println("SQL error " + ex);
            }

        } else {
            JOptionPane.showMessageDialog(center, " Missing infomation !");
        }//end check input

    }//GEN-LAST:event_btnCreateActionPerformed
    private void totalAmount() {
        DefaultTableModel model = (DefaultTableModel) tabOrderDetail.getModel();
        int len = model.getRowCount();
        double sum = 0;

        for (int i = 0; i < len; i++) {
            String str = tabOrderDetail.getValueAt(i, 4).toString();
            sum += Double.parseDouble(str);
        }
        String str = Double.toString(sum);
        System.out.println("sum " + str);
        txtAmount.setText(str);
    }
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabOrderDetail.getModel();
        int len = model.getRowCount();
        String removeCourse = (String) tabOrderDetail.getValueAt(len - 1, 1);
        for (int i = len - 1; i > -1; i--) {
            if (removeCourse == (String) tabOrderDetail.getValueAt(i, 1)) {
                model.removeRow(i);
            }
            System.out.println("i " + i);
        }
        totalAmount();


    }//GEN-LAST:event_jButton14ActionPerformed
    public void setSearchProductID(JTable table,
            TableColumn sportColumn) throws SQLException {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        comboBox.setEditable(true);
        DAO conn = new DAO();
        ArrayList<ArrayList<Object>> result = new ArrayList<ArrayList<Object>>();

        //String subtable = "diet";
        ArrayList<String> field = new ArrayList<String>();
        field.add("name");

        String[] arrayTable = {"nutrient", "diet", "book", "exercise"};

        for (String subTable : arrayTable) {
            result = conn.select(field, subTable);
            if (result == null) {
                System.out.println(" result is null, check your exist table or table is null");
            } else {

                System.out.println("result " + result);
                for (ArrayList<Object> j : result) {
                    for (Object i : j) {
                        comboBox.addItem(i);
                    }
                }

            }
        }

        sportColumn.setCellEditor(new DefaultCellEditor(comboBox));

        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer
                = new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        sportColumn.setCellRenderer(renderer);
    }

    private void tabOrderDetailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabOrderDetailFocusGained
        // TODO add your handling code here:
        try {
            setSearchProductID(tabOrderDetail, tabOrderDetail.getColumnModel().getColumn(1));
        } catch (SQLException ex) {
            Logger.getLogger(OrderAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tabOrderDetailFocusGained

    private void jComboCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboCustomerActionPerformed

    private void jComboBoxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCourseActionPerformed
        // TODO add your handling code here:
        // select * from couser inner join couserdetail on couser.id = couserdetail.couserID
        // 

        DAO conn = new DAO();
        ArrayList<ArrayList<Object>> result = new ArrayList<ArrayList<Object>>();

        Object[][] field = new Object[3][2];

        field[0][0] = "coursedetail";
        field[0][1] = "ExerciseId";
        field[1][0] = "Exercise";
        field[1][1] = "Name";
        field[2][0] = "Exercise";
        field[2][1] = "price";

        ArrayList<String> table = new ArrayList<String>();
        table.add("course");
        table.add("coursedetail");
        table.add("exercise");

        HashMap<String, Object> on = new HashMap<String, Object>();
        on.put("course.id", "coursedetail.CourseID");
        on.put("coursedetail.exerciseID", "exercise.id");

        String where = " course.name = '" + jComboBoxCourse.getSelectedItem().toString() + "'";

        try {
            result = conn.select(field, table, on, where);

        } catch (SQLException ex) {
            Logger.getLogger(OrderAdd.class.getName()).log(Level.SEVERE, null, ex);
        }

        addTableOderDetail(result, tabOrderDetail,"exercise");
        
        Object[][] field1 = new Object[3][2];
        field1[0][0] = "course";field1[0][1] = "Name";
        field1[1][0] = "book";field1[1][1] = "Name";
        field1[2][0] = "book";field1[2][1] = "price";

        ArrayList<String> table1 = new ArrayList<String>();
        table1.add("course");
        table1.add("coursebook");
        table1.add("book");

        HashMap<String, Object> on1 = new HashMap<String, Object>();
        on1.put("course.id", "coursebook.CourseID");
        on1.put("coursebook.bookID", "book.id");

        String where1 = " course.name = '" + jComboBoxCourse.getSelectedItem().toString() + "'";

        try {
            result = conn.select(field1, table1, on1, where1);

        } catch (SQLException ex) {
            Logger.getLogger(OrderAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        addTableOderDetail(result, tabOrderDetail,"book");
        
        totalAmount();
    }//GEN-LAST:event_jComboBoxCourseActionPerformed

    private void jComboEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboEmployeeActionPerformed
    public void addVoucherNo() throws SQLException {
        DAO conn = new DAO();
        String voucherNo = "OTVN";
        ArrayList<ArrayList<Object>> result = new ArrayList<ArrayList<Object>>();
        ArrayList<String> field = new ArrayList<String>();
        field.add("id");
        result = conn.select(field, "transaction", " id in (select max(id) from transaction)");

        if (result == null || result.size() == 0) {
            voucherNo += "1";
        } else {
            int row = result.size() - 1;
            int no = 1 + Integer.parseInt((String) result.get(row).get(0));
            voucherNo = voucherNo + Integer.toString(no);

        }
        txtVoucherID.setText(voucherNo);

        //DateFormat df = new SimpleDateFormat("MMM-d-yyyy");
        Date dateobj = new Date();
        txtVoucherDate.setDate(dateobj);

    }

    public void addTableOderDetail(ArrayList<ArrayList<Object>> result, JTable table,String typeName) {

        try {
            int row = result.size();
            int col = result.get(1).size();
            int tableCol = table.getColumnCount();
            int tableRow = table.getRowCount();
            int num = tableRow > 1 ? (int) table.getValueAt(tableRow - 2, 0) + 1 : 0;

            for (int i = 0; i < row; i++) {
                Object[] rowData = new Object[tableCol];

//             for(int j=0;j<col;j++){
//                 Object value = result.get(i).get(j);
//                 rowData[j] =value;
//            }
                rowData[0] = i + 1 + num; // id auto increade
                Object value = result.get(i).get(1);
                rowData[2] = value; // service name = exerciseName
                value = result.get(i).get(2);
                rowData[1] = jComboBoxCourse.getSelectedItem().toString();
                rowData[3] =typeName; // description
                rowData[4] = value; // price = exercise.price;
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.addRow(rowData);
            }

        } catch (Exception e) {
            System.out.println("error addTableOderDetail " + e);
        }

    }

    public void orderName(javax.swing.JPanel c) {
        center = c;
    }
    private javax.swing.JPanel center;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane PaneBody;
    private javax.swing.JPanel PaneFooter;
    private javax.swing.JPanel PaneHeader;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton jButton14;
    private javax.swing.JComboBox<String> jComboBoxCourse;
    private javax.swing.JComboBox<String> jComboBoxPayment;
    private javax.swing.JComboBox<String> jComboCustomer;
    private javax.swing.JComboBox<String> jComboEmployee;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel labCourse;
    private javax.swing.JLabel labCustomer;
    private javax.swing.JLabel labTitle;
    private javax.swing.JLabel labVoucherNo;
    private javax.swing.JLabel labVoucherdate;
    private javax.swing.JTable tabOrderDetail;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtConfig;
    private com.toedter.calendar.JDateChooser txtVoucherDate;
    private javax.swing.JTextField txtVoucherID;
    // End of variables declaration//GEN-END:variables

    //custom-code @viet
    public static int selectedId;
    public static String selectedName;
    public static boolean isStore = false;

    private void starter(int selectedId, String selectedName) {
        for (int i = 0; i < jComboBoxCourse.getItemCount(); ++i) {
            if (selectedName.equals(jComboBoxCourse.getItemAt(i))) {
                jComboBoxCourse.setSelectedIndex(i);
                break;
            }
        }
    }
    //
}
