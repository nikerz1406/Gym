/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Schedule;

import Employee.*;
import Entities.ProjectLib;
import Fitness.*;
import Main.MainInterface;
import static Main.MainInterface.*;
import SQLjava.*;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Viet
 */
public class ScheduleEditPanel extends javax.swing.JPanel {

    /**
     * Creates new form ScheduleEditPanel
     */
    public ScheduleEditPanel() {
        initComponents();
        starter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSchedule = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtRollNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        btnCourseDetail = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        btnEmployeeDetail = new javax.swing.JButton();
        btnEmployeeRemove = new javax.swing.JButton();
        btnCourseRemove = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtStart = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        btnEmployeeAdd = new javax.swing.JButton();
        btnCourseAdd = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtDay = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtShift = new javax.swing.JTextField();

        lblSchedule.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblSchedule.setText("Edit Schedule");

        jLabel2.setText("Roll No:");
        jLabel2.setPreferredSize(new java.awt.Dimension(102, 25));

        txtRollNo.setEnabled(false);
        txtRollNo.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel3.setText("Name:");
        jLabel3.setPreferredSize(new java.awt.Dimension(102, 25));

        jLabel6.setText("Course List");
        jLabel6.setPreferredSize(new java.awt.Dimension(102, 25));

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "No", "Course Name", "Price", "Duration", "Days", "StartDate"
            }
        ));
        jScrollPane1.setViewportView(tblCourse);

        btnCourseDetail.setText("Course Details");
        btnCourseDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourseDetailActionPerformed(evt);
            }
        });

        jLabel7.setText("Employee List");
        jLabel7.setPreferredSize(new java.awt.Dimension(102, 25));

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No", "Full Name", "Phone", "Gender", "Role"
            }
        ));
        jScrollPane2.setViewportView(tblEmployee);

        btnEmployeeDetail.setText("Employee Details");
        btnEmployeeDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeDetailActionPerformed(evt);
            }
        });

        btnEmployeeRemove.setText("Remove");
        btnEmployeeRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeRemoveActionPerformed(evt);
            }
        });

        btnCourseRemove.setText("Remove");
        btnCourseRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourseRemoveActionPerformed(evt);
            }
        });

        jLabel4.setText("Start at:");
        jLabel4.setPreferredSize(new java.awt.Dimension(102, 25));

        txtStart.setEditable(false);

        jLabel5.setText("End at:");
        jLabel5.setPreferredSize(new java.awt.Dimension(102, 25));

        txtEnd.setEditable(false);

        btnEmployeeAdd.setText("Add");
        btnEmployeeAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeAddActionPerformed(evt);
            }
        });

        btnCourseAdd.setText("Add");
        btnCourseAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourseAddActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel8.setText("Day:");
        jLabel8.setPreferredSize(new java.awt.Dimension(102, 25));

        txtDay.setEditable(false);

        jLabel9.setText("Shift:");
        jLabel9.setPreferredSize(new java.awt.Dimension(102, 25));

        txtShift.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(556, 556, 556)
                                .addComponent(btnCourseAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnCourseRemove)
                                .addGap(18, 18, 18)
                                .addComponent(btnCourseDetail))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEmployeeAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnEmployeeRemove)
                        .addGap(18, 18, 18)
                        .addComponent(btnEmployeeDetail))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSchedule)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRollNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtShift, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtStart, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSchedule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtShift)
                    .addComponent(txtStart)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRollNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEnd)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCourseDetail)
                    .addComponent(btnCourseRemove)
                    .addComponent(btnCourseAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEmployeeDetail)
                    .addComponent(btnEmployeeRemove)
                    .addComponent(btnEmployeeAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCourseAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourseAddActionPerformed
        try {
            JDialog dlgCourseList = new JDialog(mainInterface, "Course List", true);
            FitnessMainPanel fitnessMain = new FitnessMainPanel();
            FitnessViewPanel fitnessView = new FitnessViewPanel();
            JButton btnAdd = new JButton("Add");
            btnAdd.setBounds(0, 13, 50, 30);
            btnAdd.addActionListener((ActionEvent e) -> {
                boolean isExist = false;
                for (int i : courseId) {
                    if (i == FitnessMainPanel.selectedId) {
                        isExist = true;
                    }
                }
                if (isExist) {
                    JOptionPane.showMessageDialog(null, "Course's already in schedule!");
                } else {
                    DefaultTableModel modelCourse = (DefaultTableModel) fitnessView.tbCourse.getModel();
                    int selectedRow = -1;
                    for (int i = 0; i < modelCourse.getRowCount(); ++i) {
                        if (FitnessMainPanel.selectedId == Integer.parseInt(modelCourse.getValueAt(i, 1).toString())) {
                            selectedRow = i;
                        }
                    }
                    Object[] rowCourse = new Object[]{
                        modelCourse.getValueAt(selectedRow, 1), modelCourse.getValueAt(selectedRow, 2),
                        modelCourse.getValueAt(selectedRow, 3), modelCourse.getValueAt(selectedRow, 5),
                        modelCourse.getValueAt(selectedRow, 4), modelCourse.getValueAt(selectedRow, 7)
                    };
                    modelCourse = (DefaultTableModel) tblCourse.getModel();
                    modelCourse.addRow(rowCourse);
                    tblCourseChange = true;
                    dlgCourseList.dispose();
                }
            });
            fitnessView.setVisible(true);
            fitnessView.setBounds(0, 0, 998, 670);
            ProjectLib.setStatusComponent(fitnessMain, false);
            ProjectLib.setStatusComponent(fitnessView, false);
            FitnessMainPanel.btDelete.setVisible(false);
            FitnessMainPanel.btEdit.setVisible(false);
            fitnessView.pnSearch.add(btnAdd);
            fitnessView.revalidate();
            fitnessView.repaint();
            fitnessMain.pnMain.add(fitnessView);
            dlgCourseList.add(fitnessMain);
            dlgCourseList.pack();
            final Toolkit toolkit = Toolkit.getDefaultToolkit();
            final Dimension screenSize = toolkit.getScreenSize();
            final int x = (screenSize.width - dlgCourseList.getWidth()) / 2;
            final int y = (screenSize.height - dlgCourseList.getHeight()) / 2;
            dlgCourseList.setLocation(x, y);
            dlgCourseList.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(ScheduleEditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCourseAddActionPerformed

    private void btnCourseRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourseRemoveActionPerformed
        int selectedRow = tblCourse.getSelectedRow();
        DefaultTableModel modelCourse = (DefaultTableModel) tblCourse.getModel();
        modelCourse.removeRow(selectedRow);
    }//GEN-LAST:event_btnCourseRemoveActionPerformed

    private void btnCourseDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourseDetailActionPerformed
        try {
            int selectedRow = tblCourse.getSelectedRow();
            rollNo = Integer.parseInt(tblCourse.getValueAt(selectedRow, 0).toString());
            FitnessMainPanel.selectedId = rollNo;
            FitnessMainPanel.tableName = "Course";
            JDialog detailDialog = new JDialog(mainInterface, true);

        detailDialog.setSize(900, 700);
        FitnessEditPanel fitnessEdit = new FitnessEditPanel();
        fitnessEdit.setBounds(0, 0, detailDialog.getWidth(), detailDialog.getHeight());

        Component[] components = fitnessEdit.pnCourseForm.getComponents();
        for (Component component : components) {
            if (component.toString().contains("JButton")) {
                component.setVisible(false);
            } else if (component.toString().contains("JScrollPane")) {
                JScrollPane temp = (JScrollPane) component;
                temp.getViewport().getView().setEnabled(false);
            }
            component.setEnabled(false);
        }
        for (int i = 0; i < components.length; i++) {
        }

        detailDialog.add(fitnessEdit);
        detailDialog.setVisible(true);
        } catch (NumberFormatException ex) {
            Logger.getLogger(ScheduleEditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCourseDetailActionPerformed

    private void btnEmployeeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeAddActionPerformed
        try {
            JDialog dlgEmployeeList = new JDialog(mainInterface, "Employee List", true);
            EmployeeListPanel employeeView = new EmployeeListPanel();
            JButton btnAdd = new JButton("Add");
            btnAdd.setBounds(854, 13, 90, 30);
            btnAdd.addActionListener((ActionEvent e) -> {
                boolean isExist = false;
                for (int i : employeeId) {
                    if (i == FitnessMainPanel.selectedId) {
                        isExist = true;
                    }
                }
                if (isExist) {
                    JOptionPane.showMessageDialog(null, "Employee's already in schedule!");
                } else {
                    DefaultTableModel modelEmployee = (DefaultTableModel) employeeView.tblEmployee.getModel();
                    int selectedRow = -1;
                    for (int i = 0; i < modelEmployee.getRowCount(); ++i) {
                        if (EmployeeMainPanel.selectedId == Integer.parseInt(modelEmployee.getValueAt(i, 0).toString())) {
                            selectedRow = i;
                        }
                    }
                    Object[] rowCourse = new Object[]{
                        modelEmployee.getValueAt(selectedRow, 0), modelEmployee.getValueAt(selectedRow, 1),
                        modelEmployee.getValueAt(selectedRow, 2), modelEmployee.getValueAt(selectedRow, 3),
                        modelEmployee.getValueAt(selectedRow, 4)
                    };
                    modelEmployee = (DefaultTableModel) tblEmployee.getModel();
                    modelEmployee.addRow(rowCourse);
                    tblEmployeeChange = true;
                    dlgEmployeeList.dispose();
                }
            });
            employeeView.setVisible(true);
            employeeView.setBounds(0, 0, 998, 670);
            employeeView.add(btnAdd);
            employeeView.revalidate();
            employeeView.repaint();
            dlgEmployeeList.add(employeeView);
            dlgEmployeeList.pack();
            final Toolkit toolkit = Toolkit.getDefaultToolkit();
            final Dimension screenSize = toolkit.getScreenSize();
            final int x = (screenSize.width - dlgEmployeeList.getWidth()) / 2;
            final int y = (screenSize.height - dlgEmployeeList.getHeight()) / 2;
            dlgEmployeeList.setLocation(x, y);
            dlgEmployeeList.setVisible(true);
        } catch (HeadlessException e) {
            System.out.println("ScheduleEditPanel - btnEmployeeAdd: " + e);
        }
    }//GEN-LAST:event_btnEmployeeAddActionPerformed

    private void btnEmployeeRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeRemoveActionPerformed
        int selectedRow = tblEmployee.getSelectedRow();
        DefaultTableModel modelEmployee = (DefaultTableModel) tblEmployee.getModel();
        modelEmployee.removeRow(selectedRow);
    }//GEN-LAST:event_btnEmployeeRemoveActionPerformed

    private void btnEmployeeDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeDetailActionPerformed
        try {
            int selectedRow = tblEmployee.getSelectedRow();
            rollNo = Integer.parseInt(tblEmployee.getValueAt(selectedRow, 0).toString());
            EmployeeMainPanel.selectedId = rollNo;
            JDialog dlgEmployeeView = new JDialog();
            EmployeeViewPanel employeeView = new EmployeeViewPanel();
            dlgEmployeeView.add(employeeView);
            dlgEmployeeView.pack();
            final Toolkit toolkit = Toolkit.getDefaultToolkit();
            final Dimension screenSize = toolkit.getScreenSize();
            final int x = (screenSize.width - dlgEmployeeView.getWidth()) / 2;
            final int y = (screenSize.height - dlgEmployeeView.getHeight()) / 2;
            dlgEmployeeView.setLocation(x, y);
            dlgEmployeeView.setVisible(true);
        } catch (HeadlessException | NumberFormatException e) {
            System.out.println("ScheduleEditPanel - btnEmployeeDetail: " + e);
        }
    }//GEN-LAST:event_btnEmployeeDetailActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (tblCourseChange) {
            courseId.clear();
            DefaultTableModel modelCourse = (DefaultTableModel) tblCourse.getModel();
            for (int i = 0; i < modelCourse.getRowCount(); ++i) {
                courseId.add(Integer.parseInt(modelCourse.getValueAt(i, 0).toString()));
            }

        }
        if (tblEmployeeChange) {
            employeeId.clear();
            DefaultTableModel modelEmployee = (DefaultTableModel) tblEmployee.getModel();
            for (int i = 0; i < modelEmployee.getRowCount(); ++i) {
                employeeId.add(Integer.parseInt(modelEmployee.getValueAt(i, 0).toString()));
            }
        }
        DAOSchedule dao = new DAOSchedule();
        dao.queryExe("DELETE FROM scheduledetail WHERE ScheduleID = '" + rollNo + "';");
        dao.queryExe("ALTER TABLE scheduledetail AUTO_INCREMENT = 1");
        if (employeeId.size() < courseId.size()) {
            for (int i = 0; i < employeeId.size(); ++i) {
                HashMap<String, Object> updateData = new HashMap<>();
                updateData.put("ScheduleID", rollNo);
                updateData.put("CourseID", courseId.get(i));
                updateData.put("EmployeeID", employeeId.get(i));
                dao.insert(updateData, "scheduledetail");
            }
            for (int i = employeeId.size(); i < courseId.size(); ++i) {
                HashMap<String, Object> updateData = new HashMap<>();
                updateData.put("ScheduleID", rollNo);
                updateData.put("CourseID", courseId.get(i));
                dao.insert(updateData, "scheduledetail");
            }
        } else {
            for (int i = 0; i < courseId.size(); ++i) {
                HashMap<String, Object> updateData = new HashMap<>();
                updateData.put("ScheduleID", rollNo);
                updateData.put("CourseID", courseId.get(i));
                updateData.put("EmployeeID", employeeId.get(i));
                dao.insert(updateData, "scheduledetail");
            }
            for (int i = courseId.size(); i < employeeId.size(); ++i) {
                HashMap<String, Object> updateData = new HashMap<>();
                updateData.put("ScheduleID", rollNo);
                updateData.put("CourseID", employeeId.get(i));
                dao.insert(updateData, "scheduledetail");
            }
        }


    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCourseAdd;
    private javax.swing.JButton btnCourseDetail;
    private javax.swing.JButton btnCourseRemove;
    private javax.swing.JButton btnEmployeeAdd;
    private javax.swing.JButton btnEmployeeDetail;
    private javax.swing.JButton btnEmployeeRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    javax.swing.JLabel lblSchedule;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTextField txtDay;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtRollNo;
    private javax.swing.JTextField txtShift;
    private javax.swing.JTextField txtStart;
    // End of variables declaration//GEN-END:variables

    public int rollNo;
    // store ID of record selected
    ArrayList<String> columnNameS;
    // store name of columns

    ArrayList<ArrayList<Object>> data;
    ArrayList<Integer> courseId;
    ArrayList<Integer> employeeId;
    boolean tblCourseChange;
    boolean tblEmployeeChange;

    //custom-code
    private void starter() {
        if (MainInterface.userType == 1) {
            btnCourseAdd.setEnabled(false);
            btnCourseRemove.setEnabled(false);
        }
        rollNo = ScheduleMainPanel.selectedId;
        tblCourseChange = false;
        tblEmployeeChange = false;
        fillTable(rollNo);
    }

    private void fillTable(int scheduleId) {
        DAOSchedule dao = new DAOSchedule();
        courseId = new ArrayList<>();
        employeeId = new ArrayList<>();
        columnNameS = new ArrayList<>();
        columnNameS.add("ID");
        columnNameS.add("Name");
        columnNameS.add("Day");
        columnNameS.add("Shift");
        columnNameS.add("Start");
        columnNameS.add("End");
        data = dao.select(columnNameS, "schedule",
                "ID = '" + scheduleId + "'  AND status = '1';");
        data.forEach(i -> {
            txtRollNo.setText(i.get(0).toString());
            txtName.setText(i.get(1).toString());
            txtDay.setText(i.get(2).toString());
            txtShift.setText(i.get(3).toString());
            txtStart.setText(i.get(4).toString());
            txtEnd.setText(i.get(5).toString());
        });
        columnNameS.clear();
        data.clear();
        columnNameS.add("c.ID");
        columnNameS.add("c.Name");
        columnNameS.add("c.Price");
        columnNameS.add("c.Duration");
        columnNameS.add("c.Days");
        columnNameS.add("c.StartDate");
        columnNameS.add("e.ID");
        columnNameS.add("e.Name");
        columnNameS.add("e.Phone");
        columnNameS.add("e.Gender");
        columnNameS.add("e.Role");
        columnNameS.add("e.Branch");
        data = dao.select(columnNameS, "Scheduledetail as sd INNER JOIN course as c ON sd.courseID = c.ID INNER JOIN employee as e ON sd.EmployeeID = e.ID",
                "sd.ScheduleID = '" + scheduleId + "';");
        DefaultTableModel modelCourse = (DefaultTableModel) tblCourse.getModel();
        modelCourse.setRowCount(0);
        DefaultTableModel modelEmployee = (DefaultTableModel) tblEmployee.getModel();
        modelEmployee.setRowCount(0);
        data.forEach(i -> {
            ArrayList<Object> dataRow = new ArrayList<>();
            courseId.add(Integer.parseInt(i.get(0).toString()));
            dataRow.add(i.get(0));
            for (int j = 1; j < 6; ++j) {
                dataRow.add(i.get(j));
            }
            modelCourse.addRow(dataRow.toArray());
            dataRow.clear();
            employeeId.add(Integer.parseInt(i.get(6).toString()));
            dataRow.add(i.get(6));
            for (int j = 7; j < i.size(); ++j) {
                dataRow.add(i.get(j));
            }
            modelEmployee.addRow(dataRow.toArray());
        });
    }
    //end custom-code
}
