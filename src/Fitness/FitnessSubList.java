/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fitness;
import SQLjava.*;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jason
 */
public class FitnessSubList extends javax.swing.JDialog {
    SQLFitness sql = new SQLFitness();
    private static String tableName = "";
//    private static String fromPanel = "";
    
    /**
     * Creates new form FitnessAddButton
     */
    public FitnessSubList(java.awt.Frame parent, boolean modal, String tableName, String fromPanel) {
        super(parent, modal);
        initComponents();
        this.tableName = tableName;
//        this.fromPanel = fromPanel;
        getForm(tableName, fromPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        pnDisplay1 = new javax.swing.JPanel();
        pnButtonBox = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        pnDisplay2 = new javax.swing.JPanel();
        lbListTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        pnDisplay1.setPreferredSize(new java.awt.Dimension(500, 700));
        pnDisplay1.setLayout(new java.awt.CardLayout());

        btAdd.setText("Add");
        btAdd.setPreferredSize(new java.awt.Dimension(80, 30));
        btAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btAddMouseClicked(evt);
            }
        });

        btClose.setText("Close");
        btClose.setPreferredSize(new java.awt.Dimension(80, 30));
        btClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCloseMouseClicked(evt);
            }
        });

        btRemove.setText("Remove");
        btRemove.setPreferredSize(new java.awt.Dimension(80, 30));
        btRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btRemoveMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnButtonBoxLayout = new javax.swing.GroupLayout(pnButtonBox);
        pnButtonBox.setLayout(pnButtonBoxLayout);
        pnButtonBoxLayout.setHorizontalGroup(
            pnButtonBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnButtonBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
        );
        pnButtonBoxLayout.setVerticalGroup(
            pnButtonBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnButtonBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnDisplay2Layout = new javax.swing.GroupLayout(pnDisplay2);
        pnDisplay2.setLayout(pnDisplay2Layout);
        pnDisplay2Layout.setHorizontalGroup(
            pnDisplay2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnDisplay2Layout.setVerticalGroup(
            pnDisplay2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 155, Short.MAX_VALUE)
        );

        lbListTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbListTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnDisplay1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addComponent(pnButtonBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnDisplay2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbListTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(pnDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbListTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(pnDisplay2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnButtonBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCloseMouseClicked
        WindowEvent windowClosing = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(windowClosing);
    }//GEN-LAST:event_btCloseMouseClicked

    private void btAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAddMouseClicked
        try {
            switch(this.tableName){
                case "Exercise":
                    exerciseAddButton();
                    fillTable(table2, arrayList);
                    break;
                case "Book":
                    bookAddButton();
                    fillTable(table2, arrayList);
                    break;
                case "Candidate":
                    candidateAddButton();
                    fillTable(table2, arrayList);
                    break;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "FitnessAddButton :: btAddMouseClicked Error\n" + e);
        }
    }//GEN-LAST:event_btAddMouseClicked

    private void btRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btRemoveMouseClicked
        removeButton(table2);
        fillTable(table2, arrayList);
    }//GEN-LAST:event_btRemoveMouseClicked

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FitnessSubList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FitnessSubList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FitnessSubList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FitnessSubList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FitnessSubList dialog = new FitnessSubList(new javax.swing.JFrame(), true, "", "");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btClose;
    private javax.swing.JButton btRemove;
    private javax.swing.JLabel lbListTitle;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JPanel pnButtonBox;
    private javax.swing.JPanel pnDisplay1;
    private javax.swing.JPanel pnDisplay2;
    // End of variables declaration//GEN-END:variables

    //@Nang 
    static JTable table1, table2;
    static JScrollPane scrollPane;
    static ArrayList<Object[]> arrayList = new ArrayList<>();
    private void getForm(String tableName, String fromPanel){
        switch(tableName){
            case "Exercise":
                exerciseTable(fromPanel);
                break;
            case "Book":
                bookTable(fromPanel);
                break;
            case "Candidate":
                candidateTable();
                break;
        }
    }
    private void exerciseTable(String fromPanel){
        try {
            lbTitle.setText("Choose Exercise");
            FitnessViewPanel fitnessViewPanel = new FitnessViewPanel();
            table1 = (JTable)fitnessViewPanel.getSPExercise().getViewport().getView();
            pnDisplay1.add(fitnessViewPanel.getSPExercise());
            
            lbListTitle.setText("Exercise List");
            if("New".equals(fromPanel)) {
                FitnessNewPanel fitnessNew = new FitnessNewPanel();
                scrollPane = fitnessNew.getSPCourseExercise();
                table2 = (JTable)scrollPane.getViewport().getView();
                arrayList = FitnessNewPanel.exerciseList;
            }
            else if("Edit".equals(fromPanel)) {
                FitnessEditPanel fitnessEdit = new FitnessEditPanel();
                scrollPane = fitnessEdit.getSPCourseExercise();
                table2 = (JTable) scrollPane.getViewport().getView();
                arrayList = FitnessEditPanel.exerciseList;
            }
            fillTable(table2, arrayList);
            scrollPane.setBounds(0, 0, pnDisplay2.getWidth(), pnDisplay2.getHeight());
            pnDisplay2.removeAll();
            pnDisplay2.add(scrollPane);
            pnDisplay2.updateUI();
        } catch (SQLException e) {
            System.err.println("FitnessSubList :: getExerciseForm Error\n" + e);
        }
    }
    
    private void exerciseAddButton(){
        int id = -1, duration = -1, day = -1;
        double price = -1;
        String name = "";
        int row = table1.getSelectedRow();
        for (int column = 1; column < table1.getColumnCount(); column++) {
            switch (table1.getColumnName(column)) {
                case "ID":
                    id = Integer.parseInt(table1.getValueAt(row, column).toString());
                    break;
                case "Name":
                    name = table1.getValueAt(row, column).toString();
                    break;
                case "Price":
                    price = Double.parseDouble(table1.getValueAt(row, column).toString());
                    break;
                case "Duration":
                    duration = Integer.parseInt(table1.getValueAt(row, column).toString());
                    break;
                case "Days":
                    day = Integer.parseInt(table1.getValueAt(row, column).toString());
                    break;
            }
        }
        Object[] getRow = new Object[]{id, name, price, duration, day};
        arrayList.add(getRow);
    }
    
    private void bookTable(String fromPanel){
        try {
            lbTitle.setText("Choose Book");
            FitnessViewPanel fitnessViewPanel = new FitnessViewPanel();
            table1 = (JTable)fitnessViewPanel.getSPBook().getViewport().getView();
            pnDisplay1.add(fitnessViewPanel.getSPBook());
            
            lbListTitle.setText("Book List");
            if ("New".equals(fromPanel)) {
                FitnessNewPanel fitnessNew = new FitnessNewPanel();
                scrollPane = fitnessNew.getSPCourseBook();
                table2 = (JTable) scrollPane.getViewport().getView();
                arrayList = FitnessNewPanel.bookList;
            }
            else if ("Edit".equals(fromPanel)) {
                FitnessEditPanel fitnessEdit = new FitnessEditPanel();
                scrollPane = fitnessEdit.getSPCourseBook();
                table2 = (JTable) scrollPane.getViewport().getView();
                arrayList = FitnessEditPanel.bookList;
            }
            fillTable(table2, arrayList);
            scrollPane.setBounds(0, 0, pnDisplay2.getWidth(), pnDisplay2.getHeight());
            pnDisplay2.removeAll();
            pnDisplay2.add(scrollPane);
            pnDisplay2.updateUI();
        } catch (SQLException e) {
            System.err.println("FitnessSubList :: getExerciseForm Error\n" + e);
        }
    }
    
    private void bookAddButton(){
        int id = -1, quantity = -1;
        double price = -1;
        String name = "";
        int row = table1.getSelectedRow();
        for (int column = 1; column < table1.getColumnCount(); column++) {
            switch (table1.getColumnName(column)) {
                case "ID":
                    id = Integer.parseInt(table1.getValueAt(row, column).toString());
                    break;
                case "Name":
                    name = table1.getValueAt(row, column).toString();
                    break;
                case "Price":
                    price = Double.parseDouble(table1.getValueAt(row, column).toString());
                    break;
                case "Quantity":
                    quantity = Integer.parseInt(table1.getValueAt(row, column).toString());
                    break;
            }
        }
        Object[] getRow = new Object[]{id, name, price, quantity};
        arrayList.add(getRow);
    }
    
    //Candidate start
    private void candidateTable(){
        lbTitle.setText("Choose Candidate");
        table1 = createCandidate();
        lbListTitle.setText("Candidate List");
        FitnessEditPanel fitnessEdit = new FitnessEditPanel();
        scrollPane = fitnessEdit.getSPCourseCandidate();
        scrollPane.setBounds(0, 0, pnDisplay2.getWidth(), pnDisplay2.getHeight());
        table2 = (JTable) scrollPane.getViewport().getView();
        arrayList = FitnessEditPanel.candidateList;
        fillTable(table2, arrayList);
        pnDisplay2.removeAll();
        pnDisplay2.add(scrollPane);
        pnDisplay2.updateUI();
    }
    
    private JTable createCandidate(){
        JTable tbCandidate = new JTable();
        tbCandidate.setBounds(0, 0, 500, 700);
        DefaultTableModel candidateModel = (DefaultTableModel) tbCandidate.getModel();
        candidateModel.addColumn("No");
        candidateModel.addColumn("ID");
        candidateModel.addColumn("Name");
        candidateModel.addColumn("Gender");
        candidateModel.addColumn("Birthday");
        candidateModel.addColumn("Branch");
        ArrayList<Object[]> candidateList = new ArrayList<>();
        candidateList = sql.getQueryCandidate("*", "customer", "Status", "1");
        fillTable(tbCandidate, candidateList);
        JScrollPane spCandidate = new JScrollPane(tbCandidate);
        pnDisplay1.add(spCandidate);
        return tbCandidate;
    }
    private void candidateAddButton(){
        int id = -1;
        String birthday = "";
        String name = "", gender = "", branch = "";
        
        int row = table1.getSelectedRow();
        for (int column = 1; column < table1.getColumnCount(); column++) {
            switch (table1.getColumnName(column)) {
                case "ID":
                    id = Integer.parseInt(table1.getValueAt(row, column).toString());
                    break;
                case "Name":
                    name = table1.getValueAt(row, column).toString();
                    break;
                case "Gender":
                    int temp = Integer.parseInt(table1.getValueAt(row, column).toString());
                    switch (temp) {
                        case 1:
                            gender = "Male";
                            break;
                        case 2:
                            gender = "Female";
                            break;
                        default:
                            gender = "Other";
                            break;
                    }
                    break;
                case "Birthday":
                    birthday = table1.getValueAt(row, column).toString();
                    break;
                case "Branch":
                    branch = table1.getValueAt(row, column).toString();
            }
        }
            Object[] getRow = new Object[]{id, name, gender, birthday, branch};
            arrayList.add(getRow);
    }
    //Candidate End
    
    private void fillTable(JTable table, ArrayList<Object[]> arrayList){
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
        tableModel.setRowCount(0);
        int no = 0;
        for(Object[] object : arrayList){
            Object[] row = new Object[object.length + 1];
            for(int i = 0; i <= object.length; i++){
                if(i == 0){
                    row[i] = ++no;
                }
                else {
                    row[i] = object[i - 1];
                }
            }
            tableModel.addRow(row);
        }
    }
    
    private void removeButton(JTable table){
        int row = table.getSelectedRow();
        for(int i = arrayList.size() - 1; i >= 0; i--){
            if(i == row){
                arrayList.remove(i);
            }
        }
    }
}
