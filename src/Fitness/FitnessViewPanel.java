/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fitness;

import Main.MainInterface;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import SQLjava.*;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Date;
import javax.swing.JDialog;
import javax.swing.JScrollPane;

/**
 *
 * @author Jason
 */
public class FitnessViewPanel extends javax.swing.JPanel {
    DAO dao = new DAO();

    /**
     * Creates new form FitnessViewPanel
     */
    public FitnessViewPanel() throws SQLException {
        initComponents();
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnView = new javax.swing.JPanel();
        tpView = new javax.swing.JTabbedPane();
        spCourse = new javax.swing.JScrollPane();
        tbCourse = new javax.swing.JTable();
        spPackage = new javax.swing.JScrollPane();
        tbPackage = new javax.swing.JTable();
        spExercise = new javax.swing.JScrollPane();
        tbExercise = new javax.swing.JTable();
        spBook = new javax.swing.JScrollPane();
        tbBook = new javax.swing.JTable();
        pnSearch = new javax.swing.JPanel();
        cbSearch = new javax.swing.JComboBox<>();
        tfSearch = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1000, 716));

        pnView.setPreferredSize(new java.awt.Dimension(1000, 716));

        tbCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "ID", "Name", "Price", "Days", "Duration", "Limit", "Start Date", "End Date", "Schedule"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spCourse.setViewportView(tbCourse);

        tpView.addTab("Course", spCourse);

        tbPackage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No", "ID", "Name", "Price", "Months"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spPackage.setViewportView(tbPackage);

        tpView.addTab("Package", spPackage);

        tbExercise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "No", "ID", "Name", "Price", "Duration", "Days"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spExercise.setViewportView(tbExercise);

        tpView.addTab("Exercise", spExercise);

        tbBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No", "ID", "Name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spBook.setViewportView(tbBook);

        tpView.addTab("Book", spBook);

        pnSearch.setPreferredSize(new java.awt.Dimension(700, 52));

        cbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course", "Combo", "Exercise", "Book" }));
        cbSearch.setPreferredSize(new java.awt.Dimension(80, 30));

        tfSearch.setMinimumSize(new java.awt.Dimension(200, 30));
        tfSearch.setPreferredSize(new java.awt.Dimension(200, 30));

        javax.swing.GroupLayout pnSearchLayout = new javax.swing.GroupLayout(pnSearch);
        pnSearch.setLayout(pnSearchLayout);
        pnSearchLayout.setHorizontalGroup(
            pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnSearchLayout.setVerticalGroup(
            pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnViewLayout = new javax.swing.GroupLayout(pnView);
        pnView.setLayout(pnViewLayout);
        pnViewLayout.setHorizontalGroup(
            pnViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpView, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addComponent(pnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        pnViewLayout.setVerticalGroup(
            pnViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnViewLayout.createSequentialGroup()
                .addComponent(pnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tpView, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Get the ID of the row, then click edit button will show the form and value
    private void selectRow(JTable table, String tableName){
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
        table.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                int[] rows = table.getSelectedRows();
                FitnessMainPanel.selectedArray = new int[rows.length];
                for (int row = 0; row < rows.length; row++) {
                    for (int column = 0; column < table.getColumnCount(); column++) {
                        switch (table.getColumnName(column)) {
                            case "No":
                                FitnessMainPanel.selectedNo = (int) tableModel.getValueAt(rows[0], column);
                                break;
                            case "ID":
                                FitnessMainPanel.tableName = tableName;
                                FitnessMainPanel.selectedId = (int) tableModel.getValueAt(rows[0], column);
                                FitnessMainPanel.selectedArray[row] = (int) tableModel.getValueAt(rows[row], column);
                        }
                    }
                }
                if (FitnessMainPanel.selectedId != -1) {
                    FitnessMainPanel.btEdit.setEnabled(true);
                    FitnessMainPanel.btDelete.setEnabled(true);
                    FitnessMainPanel.btDetail.setEnabled(true);
                }
                else {
                    FitnessMainPanel.btEdit.setEnabled(false);
                    FitnessMainPanel.btDelete.setEnabled(false);
                    FitnessMainPanel.btDetail.setEnabled(false);
                }
            }
        });
    }
    
    private void displayTable() {
        courseTable();
        packageTable();
        exerciseTable();
        bookTable();
    }

    private void courseTable() {
        try {
            spCourse.setName("spCourse");
            int no = 1;
            String query = getQuery("course", "Status");
            ResultSet rs = dao.queryGet(query);
            if (rs != null) {
                DefaultTableModel courseModel = (DefaultTableModel) tbCourse.getModel();
                selectRow(tbCourse, "Course");
                courseModel.setRowCount(0);
                while (rs.next()) {
                    int id = rs.getInt("ID");
                    String name = rs.getString("Name");
                    double price = rs.getDouble("Price");
                    int day = rs.getInt("Days");
                    int duration = rs.getInt("Duration");
                    int member = rs.getInt("Members");
                    int limit = rs.getInt("CourseLimit");
                    Date startDate = rs.getDate("StartDate");
                    Date endDate = rs.getDate("EndDate");
                    String memberLimit = Integer.toString(member) + "/" + Integer.toString(limit);
                    Object[] row = new Object[]{no++, id, name, price, day, duration, memberLimit, startDate, endDate};
                    courseModel.addRow(row);
                }
            }
        } catch (Exception e) {

        }
    }
    
    private void packageTable() {
        int no = 1;
        String query = "SELECT * FROM package WHERE Status = 1";
        try {
            ResultSet rs = dao.queryGet(query);
            if (rs != null) {
                DefaultTableModel comboModel = (DefaultTableModel) tbPackage.getModel();
                selectRow(tbPackage, "Package");
                comboModel.setRowCount(0);
                while (rs.next()) {
                    int id = rs.getInt("ID");
                    String name = rs.getString("Name");
                    int month = rs.getInt("Month");
                    double price = rs.getDouble("Price");
                    Object[] row = new Object[]{no++, id, name, price, month};
                    comboModel.addRow(row);
                }
            } else {
                System.err.println("Table Combo is Unloaded\n");
            }
        } catch (SQLException e) {
            System.err.println("FitnessViewPanel :: packageTable Error\n" + e);
        }
    }

    private void exerciseTable() {
        int no = 1;
        String query = "SELECT * FROM exercise WHERE Status = 1";
        try {
            ResultSet rs = dao.queryGet(query);
            if (rs != null) {
                DefaultTableModel exerciseModel = (DefaultTableModel) tbExercise.getModel();
                selectRow(tbExercise, "Exercise");
                exerciseModel.setRowCount(0);
                while (rs.next()) {
                    int id = rs.getInt("ID");
                    String name = rs.getString("Name");
                    double price = rs.getDouble("Price");
                    int duration = rs.getInt("Duration");
                    int day = rs.getInt("Days");
                    Object[] row = new Object[]{no++, id, name, price, duration, day};
                    exerciseModel.addRow(row);
                }
            } else {
                System.err.println("Table Exercise is Unloaded");
            }
        } catch (SQLException e) {
            System.err.println("FitnessViewPanel :: exerciseTable Error\n" + e);
        }
    }
    
    private void bookTable() {
        int no = 1;
        String query = "SELECT * FROM book WHERE Status = 1";
        try {
            ResultSet rs = dao.queryGet(query);
            if (rs != null) {
                DefaultTableModel bookModel = (DefaultTableModel) tbBook.getModel();
                selectRow(tbBook, "Book");
                bookModel.setRowCount(0);
                while (rs.next()) {
                    int id = rs.getInt("ID");
                    String name = rs.getString("Name");
                    double price = rs.getDouble("Price");
                    int quantity = rs.getInt("Quantity");
                    Object[] row = new Object[]{no++, id, name, price, quantity};
                    
                    bookModel.addRow(row);
                }
            } else {
                System.err.println("Table Book is Unloaded");
            }
        } catch (SQLException e) {
            System.err.println("FitnessViewPanel :: bookTable Error\n" + e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbSearch;
    public javax.swing.JPanel pnSearch;
    private javax.swing.JPanel pnView;
    private javax.swing.JScrollPane spBook;
    private javax.swing.JScrollPane spCourse;
    private javax.swing.JScrollPane spExercise;
    private javax.swing.JScrollPane spPackage;
    private javax.swing.JTable tbBook;
    public javax.swing.JTable tbCourse;
    private javax.swing.JTable tbExercise;
    private javax.swing.JTable tbPackage;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTabbedPane tpView;
    // End of variables declaration//GEN-END:variables
    
    public JScrollPane getSPExercise(){
        return spExercise;
    }
    
    public JScrollPane getSPBook(){
        return spBook;
    }
    
    //SQL Zone
    private String getQuery(String tableName, String whereName){
        String select = "SELECT * FROM " + tableName + " ";
        String where = "WHERE " + whereName + " = 1";
        String query = select + where;
        return query;
    }
}

    
